apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: add-privileged-existing-namespaces
  annotations:
    policies.kyverno.io/title: Add Privileged Label to Existing Namespaces
    policies.kyverno.io/category: Pod Security Admission
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Namespace
    kyverno.io/kyverno-version: 1.8.0
    policies.kyverno.io/minversion: 1.7.0
    kyverno.io/kubernetes-version: "1.24"
    policies.kyverno.io/description: >-
      When Pod Security Admission is configured with a cluster-wide AdmissionConfiguration file
      which sets either baseline or restricted, for example in many PaaS CIS profiles, it may
      be necessary to relax this to privileged on a per-Namespace basis so that more
      granular control can be provided. This policy labels new and existing Namespaces, except
      that of kube-system, with the `pod-security.kubernetes.io/enforce: privileged` label.
spec:
  mutateExistingOnPolicyUpdate: true
  rules:
  - name: label-privileged-namespaces
    match:
      any:
      - resources:
          kinds:
          - Namespace
    mutate:
      targets:
        - apiVersion: v1
          kind: Namespace
      patchStrategicMerge:
        metadata:
          <(name): "!kube-system"
          labels:
            pod-security.kubernetes.io/enforce: privileged

---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: exclude-namespaces
  annotations:
    policies.kyverno.io/title: Exclude Namespaces Dynamically
    policies.kyverno.io/category: Sample
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Namespace, Pod
    policies.kyverno.io/minversion: 1.6.0
    pod-policies.kyverno.io/autogen-controllers: none
    kyverno.io/kyverno-version: 1.6.0
    kyverno.io/kubernetes-version: "1.23"
    policies.kyverno.io/description: >-
      It's common where policy lookups need to consider a mapping to many possible values rather than a
      static mapping. This is a sample which demonstrates how to dynamically look up an allow list of Namespaces from a ConfigMap
      where the ConfigMap stores an array of strings. This policy validates that any Pods created
      outside of the list of Namespaces have the label `foo` applied.      
spec:
  validationFailureAction: Audit
  background: true
  rules:
  - name: exclude-namespaces-dynamically
    context:
      - name: namespacefilters
        configMap:
          name: namespace-filters
          namespace: kyverno
    match:
      any:
      - resources:
          kinds:
          - Deployment
          - DaemonSet
          - StatefulSet
          - Job
    preconditions:
      all:
      - key: "{{request.object.metadata.namespace}}"
        operator: AnyNotIn
        value: "{{namespacefilters.data.exclude}}"
    validate:
      message: >
        Creating Pods in the {{request.namespace}} namespace,
        which is not in the excluded list of namespaces {{ namespacefilters.data.exclude }},
        is forbidden unless it carries the label `foo`.        
      pattern:
        spec:
          template:
            metadata:
              labels:
                foo: "*"
  - name: exclude-namespaces-dynamically-pods
    context:
      - name: namespacefilters
        configMap:
          name: namespace-filters
          namespace: default
    match:
      any:
      - resources:
          kinds:
          - Pod
    preconditions:
      all:
      - key: "{{request.object.metadata.namespace}}"
        operator: AnyNotIn
        value: "{{namespacefilters.data.exclude}}"
    validate:
      message: >
        Creating Pods in the {{request.namespace}} namespace,
        which is not in the excluded list of namespaces {{ namespacefilters.data.exclude }},
        is forbidden unless it carries the label `foo`.        
      pattern:
        metadata:
          labels:
            foo: "*"
  - name: exclude-namespaces-dynamically-cronjobs
    context:
      - name: namespacefilters
        configMap:
          name: namespace-filters
          namespace: default
    match:
      any:
      - resources:
          kinds:
          - CronJob
    preconditions:
      all:
      - key: "{{request.object.metadata.namespace}}"
        operator: AnyNotIn
        value: "{{namespacefilters.data.exclude}}"
    validate:
      message: >
        Creating Pods in the {{request.namespace}} namespace,
        which is not in the excluded list of namespaces {{ namespacefilters.data.exclude }},
        is forbidden unless it carries the label `foo`.        
      pattern:
        spec:
          jobTemplate:
            spec:
              template:
                metadata:
                  labels:
                    foo: "*"
